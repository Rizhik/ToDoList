buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.gradle.Application'

jar {
    baseName = 'to-do-list'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.hibernate:hibernate-validator")
    compile("org.apache.tomcat.embed:tomcat-embed-el")
 	compile("org.springframework:spring-jdbc")
 	compile("mysql:mysql-connector-java")
 	
 	compile('com.google.code.gson:gson')
 	
 	testCompile("org.springframework:spring-test")
 	testCompile("org.mockito:mockito-core")
 	testCompile ("org.testng:testng:6.9.4")
 	testCompile ("junit:junit")
 	
}

configurations {
    compile.exclude group: 'commons-logging'
}

test {
	// enable TestNG support
    useTestNG() {
         suites 'src/test/resources/org/gradle/test-resource.xml'  
    }

  // show standard out and standard error of the test JVM(s) on the console
  // testLogging.showStandardStreams = true

  // listen to events in the test execution lifecycle
  // beforeTest { descriptor ->logger.lifecycle("Running test: " + descriptor)}

  // listen to standard out and standard error of the test JVM(s)
  // onOutput { descriptor, event ->logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )}
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
